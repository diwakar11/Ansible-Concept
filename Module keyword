-------------------------------------------------
failed_when

- name: Fail task when the command error output prints FAILED
  command: /usr/bin/example-command -x -y -z
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
------------------------------------------------
When you register a variable in a task with a loop, the registered variable contains a value for each item in the loop. 
The data structure placed in the variable during the loop will contain a "results" attribute, that is a list of all responses from the 
module. For a more in-depth example of how this works, see the Loops section on using register with a loop.
-------------------------------------------------
playbook_dir
The path to the directory of the playbook that was passed to the ansible-playbook command line.

  - name: "Os Upgrade on first master"
    include_role:
     name: "{{ playbook_dir }}/../../

-------------------------------------------------
Registering variables with a loop
You can register the output of a loop as a variable. For example:
- shell: "echo {{ item }}"
  loop:
    - "one"
    - "two"
  register: echo

When you use register with a loop, the data structure placed in the variable will contain a "results" attribute that is a list of all
responses from the module. This differs from the data structure returned when using register without a loop:

Subsequent loops over the registered variable to inspect the results may look like:

- name: Fail if return code is not 0
  fail:
    msg: "The command ({{ item.cmd }}) did not have a 0 return code"
  when: item.rc != 0
  loop: "{{ echo.results }}"

-------------------------------------------------
To get the last name of a file path, like ‘foo.txt’ out of ‘/etc/asdf/foo.txt’:
{{ path | basename }}
-----------------------------
Special Variables  -- i.e inventory_hostname, groups, role_path, playbook_dir, ansible_loop_var, hostvars
https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html#special-variables
Return Values  --- i.e rc, msg, stdout, stdout_lines
https://docs.ansible.com/ansible/latest/reference_appendices/common_return_values.html
-----------------------------
local_action
delegate_to
delegate_to: "{{ groups[CLOUD_PROVIDER + '-' + KUBERNETES_CLUSTER_PREFIX + '-vmss-master'][0] | default('') }}"
------------------------------
run_once: True
register: 
-----------------------------
-----------------------------
Module:-
tempfile

- name: use the registered var and the file module to remove the temporary file
  file:
    path: "{{ heptioContour.path }}"
    state: absent
  when: heptioContour.path is defined

meta – Execute Ansible ‘actions’
assert – Asserts given expressions are true
htpasswd
cron
block
stat
fetch
setup – Gathers facts about remote hosts
wait_for_connection – Waits until remote system is reachable/usable
service_facts – Return service state information as fact data
java_cert – Uses keytool to import/remove key from java keystore (cacerts)
add_host – Add a host (and alternatively a group) to the ansible-playbook in-memory inventory
raw – Executes a low-down and dirty command
rescue- its used with block module.
---
- name: Create project heptioContour and all its file
  command: kubectl apply -f "{{ item.path }}"
  with_items: "{{ path_files.files  | sort(attribute='path')}}"

--
when: '"vmss" not in inventory_hostname'
inventory_hostname ---The inventory name for the ‘current’ host being iterated over in the play

--
- name: Wait for for graylog/elasticsearch/mongodb pod to come up
  command: kubectl wait -n logging --for=condition=Ready po -l "app in (elasticsearch,graylog,mongodb)" --timeout=400s --kubeconfig ~/.kube/config
  ignore_errors: yes

---------------------------------------------------------
********************************
-----Looping over inventory---
********************************
To loop over your inventory, or just a subset of it, you can use a regular loop with the ansible_play_batch or groups variables:

# show all the hosts in the inventory
- debug:
    msg: "{{ item }}"
  loop: "{{ groups['all'] }}"

# show all the hosts in the current play
- debug:
    msg: "{{ item }}"
  loop: "{{ ansible_play_batch }}"
-------
  You use a pattern almost any time you execute an ad-hoc command or a playbook
  
-----
  loop: "{{ groups['azure-hosts'] }}"
  when: '"vmss" not in item'
------
---------------------------------------------------------
  - name: Check if ipsec is running.
    command: systemctl status ipsec
    register: OS_IPSEC_STATUS

  - name: Reload ipsec policies
    shell: systemctl reload ipsec
    when: OS_IPSEC_STATUS.rc == 0
    
rc == 0 means command executed successfully.

----------------------------------------------------------

  

