-------------------------------------------------------------------------------------------------------------------------------------
ini_file – Tweak settings in INI files

Manage (add, remove, change) individual settings in an INI-style file without having to manage the file as a whole with, say, 
template or assemble. Adds missing sections if they don’t exist.

Ex:- 
# Before 2.3, option 'dest' was used instead of 'path'
- name: Ensure "fav=lemonade is in section "[drinks]" in specified file
  ini_file:
    path: /etc/conf
    section: drinks
    option: fav
    value: lemonade
    mode: 0600
    backup: yes

------------------------------------------------------------------------------------------------------------------------------------

include_vars – Load variables from files, dynamically within a task

-Loads variables from a YAML/JSON files dynamically from within a file or from a directory recursively during task runtime. 
If loading a directory, the files are sorted alphabetically before being loaded.
-This module is also supported for Windows targets.


Ex:-
----------
From Apache Installation Module:- 

# Include variables and define needed variables.
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Include variables for Amazon Linux.
  include_vars: "AmazonLinux.yml"
  when:
    - ansible_distribution == "Amazon"
    - ansible_distribution_major_version == "NA"
----------


- name: Include vars of stuff.yaml into the 'stuff' variable (2.2).
  include_vars:
    file: stuff.yaml
    name: stuff

- name: Conditionally decide to load in variables into 'plans' when x is 0, otherwise do not. (2.2)
  include_vars:
    file: contingency_plan.yaml
    name: plans
  when: x == 0

- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yaml"
    - "{{ ansible_os_family }}.yaml"
    - default.yaml

- name: Bare include (free-form)
  include_vars: myvars.yaml

- name: Include all .json and .jsn files in vars/all and all nested directories (2.3)
  include_vars:
    dir: vars/all
    extensions:
        - json
        - jsn

- name: Include all default extension files in vars/all and all nested directories and save the output in test. (2.2)
  include_vars:
    dir: vars/all
    name: test

- name: Include default extension files in vars/services (2.2)
  include_vars:
    dir: vars/services
    depth: 1

- name: Include only files matching bastion.yaml (2.2)
  include_vars:
    dir: vars
    files_matching: bastion.yaml

- name: Include all .yaml files except bastion.yaml (2.3)
  include_vars:
    dir: vars
    ignore_files: [bastion.yaml]
    extensions: [yaml]

-------------------------------------------------------------------------------------------------------------------------------------

set_fact – Set host facts from a task

- This module allows setting new variables. Variables are set on a host-by-host basis just like facts discovered by the setup module.
- These variables will be available to subsequent plays during an ansible-playbook run, but will not be saved across executions even if 
  you use a fact cache.
- Per the standard Ansible variable precedence rules, many other types of variables have a higher priority, so this value may be 
  overridden. See Variable Precedence Guide for more information.
- This module is also supported for Windows targets.


